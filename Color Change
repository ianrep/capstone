## BASE MODEL

from mip import Model, xsum, minimize, BINARY, OptimizationStatus, INTEGER
import numpy as np

# DEFINE VARIABLES
colors = ['black', 'blue', 'grey', 'red', 'white']
# colors that can be painted. Generally looped throug with "i"

skids = [0,0,0,0,1,1,2,5,5,5,4,3,14,14,14,14,14,14,14,14,9,9,10,10,9,9,10,10,11,12,9,9,10,10,9,9,10,10,11,12,0,0,0,0,1,1,2,5,5,5,4,3,9,9,10,10,9,9,10,10,11,12,9,9,10,10,9,9,10,10,11,12,0,0,0,0,1,1,2,5,5,5,4,3,14,14,14,14,14,14,14,14,9,9,10,10,9,9,10,10,11,12,9,9,10,10,9,9,10,10,11,12,6,6,6,7,7,8,9,9,10,10,9,9,10,10,11,12,6,6,6,7,7,8,5,5,5,13]
#number of skids and skid types. Generally looped through with "j"

types = ['s front', 's rear','s skullcaps','s scuff plate','s liscense plate','s rocker','x front','x rear','x skullcap','3 front','3 rear','3 skullcap','y skullcap','spray pattern','small parts']
# skid types
# 0 = s front, 1 = s rear, 2 = s skullcaps, 3 = s scuff plate, 4 = s lp, 5 = s rocker
# 6 = x front, 7 = x rear, 8 = x skullcap
# 9 = 3 front, 10 = 3 rear, 11 = 3 skullcap
# 12 = y skullcap
# 13 = spary pattern/data pack
# 14 = small parts
# generally looped through with "k"

# DEFINE SETS
a, b, e = len(colors), len(skids), len(types)
I, J, K = range(a), range(b), range(e)
# sets just help when using for loops, easier to write

#coding needed variables, define array so more computitionally efficient later
sol = np.zeros((a,b,e))
kinds = np.zeros((b,e))
d = np.zeros((a,e))
short = np.zeros((a,e))
changeq = np.zeros((a,b))
qtyshort = np.zeros((a,e))
produced = np.zeros((a,e))
totalloss = 0
countshort = 0
countchange = 0

penshort = 20000 #penalty in cm for shorting. Keep above 5000. Higher numbers will short less and do more color changes
prevcolor = 'na' #should be a dynamic input. Match element of "colors" exactly

feasiblepenalty = 100000000 #penalty for going above maximum or below current. Should be a very very large number
# without this, a few rare cases may result in no feasible solution

numSmallparts = skids.count(14)

# fill in array "kinds" to determine if the skid is that type 
for j in J:
    for k in K:
        if skids[j] == k:
            kinds[j][k] = 1

# PARAMETERS
# fill in the cost array
c = [[520,140,140,340,220],
[520,140,140,340,220],
[700,700,700,700,700],
[520,140,140,340,220],
[520,140,140,340,220],
[520,140,140,340,220],
[520,140,140,340,220],
[520,140,140,340,220],
[700,700,700,700,700],
[520,140,140,340,220],
[520,140,140,340,220],
[520,140,140,340,220],
[700,700,700,700,700],
[520,140,140,340,220],
[520,140,140,340,220]]
# penalty for switching from color i, item type k           

demand = [[5,5,5,4,4,4,5,5,5,25,25,25,25,0,numSmallparts],
[4,4,4,4,4,4,5,5,5,22,22,22,22,0,0],
[5,5,5,5,5,5,6,6,6,32,32,32,32,0,0],
[2,2,2,2,2,2,2,2,2,10,10,10,10,0,0],
[6,6,6,6,6,6,7,7,7,38,38,38,38,0,0]]
# demand for part type k, color i. Dyanamic input

mininv = [[13,13,26,13,13,26,15,15,30,43,43,43,43,0,0],
[12,12,24,12,12,24,6,6,12,41,41,41,41,0,0],
[15,15,30,15,15,30,8,8,16,52,52,52,52,0,0],
[11,11,22,11,11,22,5,5,10,32,32,32,32,0,0],
[16,16,32,16,16,32,22,22,44,62,62,62,62,0,0]]
# minimim inventory for part type k color i

currentinv = [[13,13,26,13,13,26,15,15,30,43,43,43,43,0,0],
[12,12,24,12,12,24,6,6,12,41,41,41,41,0,0],
[15,15,30,15,15,30,8,8,16,52,52,52,52,0,0],
[11,11,22,11,11,22,5,5,10,32,32,32,32,0,0],
[16,16,32,16,16,32,22,22,44,62,62,62,62,0,0]]
# current inventory for part type k, color i. Dynamic input

maxinv = [[36,36,52,40,60,52,36,36,60,108,108,86,86,10,10],
[24,24,48,40,60,48,24,24,24,108,108,82,82,10,10],
[36,36,60,40,60,60,36,36,32,108,108,104,104,10,10],
[24,24,44,40,60,44,24,24,20,108,108,64,64,10,10],
[60,60,64,40,60,64,60,60,88,216,216,124,124,10,10]]
#  maximum inventory for part type k color i

qty = [4,6,24,12,18,4,4,6,24,6,6,24,24,1,1]
# quantity of part type k

#MODEL
m = Model("colorAutomation")

#DEFINE VARIABLES
x = [[[m.add_var(var_type=BINARY) for k in K] for j in J] for i in I]
# decision variable, what color i to paint skid j

s = [[m.add_var(var_type=BINARY) for j in J] for i in I]
# defines a binary helper variable that will allow to measure switches

l = [[m.add_var(var_type=INTEGER) for k in K] for i in I]
# loss variable, how many times you are shorting demand for type k color i

l3 = [[m.add_var(var_type=INTEGER) for k in K] for i in I]
# loss variable2, how many times you are shorting demand for type k color i by 2 or more

invwrong = [[m.add_var(var_type=INTEGER) for k in K] for i in I]
# extra variable for going above maximum or below minimum inventory for part type k, color i

# OBJECTIVE
m.objective = minimize(xsum(s[i][j]*c[k][i] for j in J for i in I for k in K)
                       +xsum(l[i][k]*penshort for k in K for i in I)
                       +xsum(l3[i][k]*penshort*2 for k in K for i in I)
                        +xsum(invwrong[i][k]*feasiblepenalty for k in K for i in I))

# SUBJECT TO CONSTRAINS
for j in J[:-1]:
    for i in I:
        m += xsum(x[i][j+1][k]-x[i][j][k] for k in K)<= s[i][j]
# give the switch variable a 1 if it switches, 0 otherwise. Note last skid is ignored

for k in K:
    for i in I:        
        m += xsum(x[i][j][k]*qty[k]for j in J) >= demand[i][k]+mininv[i][k]-currentinv[i][k]-l[i][k]
# must at least meet demand, or face cost penalty

for k in K:
    for i in I:        
        m += xsum(x[i][j][k]*qty[k]for j in J) >= demand[i][k]+mininv[i][k]-currentinv[i][k]-l3[i][k]-3
# must at least meet demand less 3, or face larger cost penalty
        
for k in K:    
    for j in J:
        m += xsum(x[i][j][k] for i in I) <= 1
# each skid must have at most 1 color
        
for k in K:
    for j in J:       
        m += xsum(x[i][j][k] for i in I) == kinds[j][k]
# the skid must be painted, and must be painted the correct type

m+= xsum(x[0][j][14] for j in J) == numSmallparts
# small parts must be painted block

for i in I:
    for k in K:
        currentinv[i][k] + xsum(x[i][j][k] for j in J)*qty[k]- demand[i][k] >= 0 - invwrong[i][k]
# final inventory must be greater than 0, or face an extreme penalty

for i in I:
    for k in K:
        currentinv[i][k] + xsum(x[i][j][k] for j in J)*qty[k]- demand[i][k] <= maxinv[i][k] + invwrong[i][k]
# final inventory must be less than maximum inventory, or face an extreme penalty

# SOLUTION
status = m.optimize(max_seconds=600)
# maximum runtime is 10 minutes

if m.num_solutions:
    #if you find a solution
    
    for j in J:
        for k in K:
            for i in I: 
                
                sol[i][j][k] = x[i][j][k]
                # sets sol ijk to be the value of the decison variable x
                
                if sol[i][j][k] == 1: 
                    print(j+1,colors[i],types[k])
                    produced[i][k]= produced[i][k] + sol[i][j][k]
                    # print what you produced and add to produced
                    
                    if colors[i] != prevcolor:
                        countchange = countchange + 1
                        totalloss = totalloss + c[k][i]
                        # count colorchange
                        
                    prevcolor = colors[i]  
                    # set the color to be what the last one was
                                               
    for i in I:
        for k in K:
            short[i][k] = l[i][k]
            # count times you shorted
            
            if short[i][k] >= 1:
                countshort = countshort + 1
                qtyshort[i][k] = l[i][k]
                print('warning, you are shorting ',colors[i],types[k],'by',qtyshort[i][k])
                # display amount shorting
                
    for i in I:
        for j in J:
            changeq[i][j] = s[i][j]
            if changeq[i][j] == 1: then: countchange = countchange + 1
                # count times you are shorting
            
    print('total losses from color changes:',totalloss,"cm")
    print('shorting a total of ',countshort,'parts')
    print(countchange,' total color changes')
    # print summary/final results
    
else: 
    print ('No feasible solution. You are going above maximum inventory, below 0 inventory, or violating another constraint')
    
for i in I:
    for k in K:
        currentinv[i][k] = currentinv[i][k] + produced[i][k]*qty[k]- demand[i][k]
        # for each part and color, update current inventory
